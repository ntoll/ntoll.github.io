<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>ntoll.org ~ everything I say is false</title>
    <link>http://ntoll.org/</link>
    <atom:link href="http://ntoll.org/rss.xml" rel="self" type="application/rss+xml" />
    <description>The personal website of Nicholas H.Tollervey</description>
    <image>
        <url>http://ntoll.org/static/images/logo.png</url>
        <link>http://ntoll.org/</link>
        <title>ntoll.org ~ everything I say is false</title>
    </image>
    
    <item>
        <title>A Classical Playlist of Love</title>
        <link>http://ntoll.org/article/playlist-love</link>
        <guid>http://ntoll.org/article/playlist-love</guid>
        <description>&lt;h1&gt;&lt;a href=&quot;http://ntoll.org/article/playlist-love&quot;&gt;A Classical Playlist of Love&lt;/a&gt;&lt;/h1&gt;&lt;p class=&quot;published_on&quot;&gt;Sunday, 17th September 2019 (4:00PM)&lt;/p&gt;

&lt;p&gt;A couple I know recently got in touch asking me to suggest a playlist of
classical music. What follows is my response along with videos of performances
of the pieces I chose.&lt;/p&gt;

&lt;p&gt;Rather just put together a playlist of favourites or random choices, I
decided it would be interesting and stimulating to assemble a set of pieces
related to a particular feeling. In this case, I chose love.&lt;/p&gt;

&lt;p&gt;Why love?&lt;/p&gt;

&lt;p&gt;Because love is complicated, tragic, happy, joyful, funny, raunchy and many
more aspects too numerous to list here. Furthermore, the western classical
tradition has around 900 years of musical reactions, settings and descriptions
of love. It provides me with an opportunity for both breadth and depth.&lt;/p&gt;

&lt;p&gt;I&#x27;m going to associate each piece with some aspect of love, provide
context and commentary and a link to a video of a performance of the
selected piece.&lt;/p&gt;

&lt;p&gt;I want to draw your attention to the fact that I&#x27;m sharing videos of
performances. Ideally, you&#x27;d listen to these pieces in person at a concert. I
believe that only in such a live situation can you really experience the
fleeting moment of the performance, executed by highly trained musicians and
feel that sense of being in that particular moment, together with all the
others in attendence. The videos are a less than perfect replacement, yet still
have the potential to be extraordinarily moving.&lt;/p&gt;

&lt;p&gt;Since this is classical music, some of it is ancient, may sound strange to
modern ears not familiar with styles and mannerisms from hundreds of years ago
or uses sung or instrumental techniques that sound odd because they&#x27;re not used
much in contempory popular music.&lt;p&gt;

&lt;p&gt;Consider this an invitation to enlarge your musical world.&lt;/p&gt;

&lt;p&gt;All the music you&#x27;ll hear was written by a fellow human being expressing
their reaction to a notion of love. The strangeness you hear simply
demonstrates how diverse is the music of love -- a feeling universally
eternal and familiar yet so differently expressed through time and place. Such
musical encounters are a way to learn of, and from, our ancestors thoughts of
love.&lt;/p&gt;

&lt;h3&gt;Tender Love&lt;/h3&gt;

&lt;p&gt;Gustav Mahler - Adagietto from Symphony No. 5&lt;/p&gt;

&lt;p&gt;This is a musical representation of Mahler&#x27;s love for his wife Alma. Their
friend Wilem Engelberg recollects, &quot;In place of a letter, he sent her this in
manuscript form, not adding a further word. She understood and wrote to him
telling him to come!!! They both told me this.&quot;&lt;/p&gt;

&lt;p&gt;Alma later revealed Gustav left her the following poem with the score.&lt;/p&gt;

&lt;blockquote&gt;In which way I love you, my sunbeam,&lt;br/&gt;
I cannot tell you with words.&lt;br/&gt;
Only my longing, my love and my bliss&lt;br/&gt;
can I with anguish declare.&lt;/blockquote&gt;

&lt;p&gt;The performance in the video is by the Vienna Philharmonic Orchestra (who,
in 1898, hired Mahler as their musical director) and Leonard Bernstein, one of
the foremost conductors of Mahler&#x27;s music in the latter part of the twentieth
century.&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/yjz2TvC2TT4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3&gt;Tragic Love&lt;/h3&gt;

&lt;p&gt;Pyotr Ilyich Tchaikovsky - Fantasy Overture to Romeo and Juliet&lt;/p&gt;

&lt;p&gt;Tchaikovsky was well acquainted with tragic love: he was a gay man in 19th
century Russia (a time and place full of prejudice towards someone like
himself).&lt;/p&gt;

&lt;p&gt;Such tragedy and pain as well as an overflowing sense of passion are
skillfully captured in this piece or &quot;musical impressions&quot; losely assembled to
follow the story of Romeo and Juliet. Listen out for the overwhelming &quot;love
theme&quot; which has become a musical clich√© for inevitably doomed lovers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Cxj8vSS2ELU&quot;&gt;This video&lt;/a&gt; (which
is one of several YouTube won&#x27;t allow me to embed), is of a performance by the
London Symphony Orchestra at the Proms.&lt;/p&gt;

&lt;h3&gt;Romantic Love&lt;/h3&gt;

&lt;p&gt;Sergei Rachmaninoff - Piano Concerto No.2&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/l4zkc7KEvYM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 17 Nov 2019 16:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Testing CircuitPython Modules</title>
        <link>http://ntoll.org/article/circuitpython-tests</link>
        <guid>http://ntoll.org/article/circuitpython-tests</guid>
        <description>&lt;h1&gt;&lt;a href=&quot;http://ntoll.org/article/circuitpython-tests&quot;&gt;Testing CircuitPython Modules&lt;/a&gt;&lt;/h1&gt;&lt;p class=&quot;published_on&quot;&gt;Monday, 25th November 2019 (1:30PM)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://micropython.org/&quot;&gt;MicroPython&lt;/a&gt;, a project by my
buddy &lt;a href=&quot;http://dpgeorge.net/&quot;&gt;Damien George&lt;/a&gt;, is a
complete reimplementation of the Python programming language for
microcontrollers and embedded systems. Put simply, it&#x27;s Python for extremely
small computers (and I once
&lt;a href=&quot;http://shop.oreilly.com/product/0636920056515.do&quot;&gt;wrote a book about it&lt;/a&gt;).
&lt;a href=&quot;https://circuitpython.org/&quot;&gt;CircuitPython&lt;/a&gt;, a friendly fork of
MicroPython, is sponsored by the fantastic folks
at &lt;a href=&quot;https://adafruit.com/&quot;&gt;Adafruit&lt;/a&gt;, a company who make playful and
easy-to-use &quot;hackable&quot; technology while promoting a welcoming, friendly and
diverse community of makers. They are led by legendary founder and electrical
engineer extraordinaire, &lt;a href=&quot;http://www.ladyada.net/&quot;&gt;Limor &quot;ladyada&quot; Fried&lt;/a&gt;.
CircuitPython is MicroPython for Adafruit&#x27;s line of boards and with a
consistent API for accessing the numerous bits of cool hardware you can use
with such devices.&lt;/p&gt;

&lt;p&gt;I was privileged to recently complete a block of work for Adafruit: I&#x27;ve
written a CircuitPython module called &lt;code&gt;adafruit_radio&lt;/code&gt; that makes it
easy for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bluetooth&quot;&gt;Bluetooth&lt;/a&gt; enabled
Adafruit boards to communicate with each other. The API is
a simplified version of the work myself and a number of other volunteers did on
the
&lt;a href=&quot;https://microbit-micropython.readthedocs.io/en/v1.0.1/radio.html&quot;&gt;equivalent functionality&lt;/a&gt;
for the BBC micro:bit (&lt;a href=&quot;https://microbit-micropython.readthedocs.io/en/v1.0.1/tutorials/radio.html&quot;&gt;here&#x27;s a tutorial I wrote for the micro:bit
radio&lt;/a&gt;, to make electronic &quot;fireflies&quot; blink at each other over
Bluetooth).&lt;/p&gt;

&lt;p&gt;In the new Adafruit module, sending a message is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio()
r.send(&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Receiving requires a loop (to allow the device to keep checking for
messages), but is equally as simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio()

while True:
    message = r.receive()
    if message:
        # Do something useful with the message.
        print(message)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;The best model for thinking about this module is that of kids&#x27;
walkie-talkies. Each
radio is tuned to a certain channel upon which it broadcasts and receives.
If you send a message, anyone else listening in on that channel and within
range will receive it. You&#x27;ll also receive messages broadcast on that
channel from others within range. 
This is an ideal network topology because it&#x27;s both familiar
yet capable since other, more specialised, network topologies can be built on
top of it. There is potential for users to grow from a simple &quot;walkie-talkie&quot;
model of networking to something more sophisticated and of their own
devising.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/walkie-talkie.jpg&quot; alt=&quot;Kids on walkie-talkies&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The channels in the module are numbered between 0-255 and can be set when
creating a &lt;code&gt;Radio&lt;/code&gt; object (the default channel number is 42 in
honour of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Douglas_Adams&quot;&gt;Douglas Adams&lt;/a&gt;, who
saw so much humane potential in new technology yet mischievously warned of the
polluting effect of technology for technology&#x27;s sake via the inept
work of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Technology_in_The_Hitchhiker%27s_Guide_to_the_Galaxy#Sirius_Cybernetics_Corporation&quot;&gt;Sirius Cybernetics Corporation&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio(channel=123)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Alternatively, you can change channel at any time via the &lt;code&gt;Radio&lt;/code&gt;
object&#x27;s &lt;code&gt;configure&lt;/code&gt; method (continuing the example above):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.configure(channel=7)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Finally, in addition to sending strings of characters it&#x27;s also possible to
send and receive arbitrary bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio()
r.send_bytes(b&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Receiving bytes gives you the full context of the message expressed as a
Python tuple consisting of three values: the raw bytes, the RSSI reading (i.e.
strength of the signal, from 0 [max] to -255 [min]), and a timestamp
representing the number (and fraction of) seconds since the device powered up,
as demonstrated in the following REPL based example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from adafruit_radio import Radio
&amp;gt;&amp;gt;&amp;gt; r = Radio()
&amp;gt;&amp;gt;&amp;gt; r.receive_full()
(b&#x27;Hello&#x27;, -40, 3245.155408037)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;That&#x27;s it! You can find the code in &lt;a href=&quot;https://github.com/ntoll/Adafruit_CircuitPython_Radio&quot;&gt;this GitHub repository&lt;/a&gt;.
Special mention and thanks must be made to Adafruit&#x27;s
&lt;a href=&quot;http://tannewt.org/&quot;&gt;Scott Shawcroft&lt;/a&gt; and
&lt;a href=&quot;https://danhalbert.org/&quot;&gt;Dan Halbert&lt;/a&gt; who
wrote the Bluetooth API I used. Because of their
work I was able to create my module with less than a hundred lines of Python
(at time of writing). Thanks chaps!&lt;/p&gt;

&lt;p&gt;Armed with this context, I&#x27;m going to explain why and how I created a
comprehensive test suite for the &lt;code&gt;adafruit_radio&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;I&#x27;d summarise my approach to testing as follows:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Testing is fundamental for creating and maintaining well designed
    software. My experience is that it tends to produce code that is both
    simple and easy to understand because nobody wants to write complicated
    tests to exercise equally complicated code. The process of exercising code
    through tests forces a developer to think carefully about how their code
    is written while having the added benefit of demonstrating it works as
    expected. Simplicity and ease of understanding are
    desirable properties because such code is easier to read, correct and
    maintain and also indicates the author&#x27;s own clarity of thought (a good
    sign). I also believe it helpful and friendly to write code that&#x27;s easy
    for others to read and understand (I often imagine my code will be read by
    an intelligent beginner coder, because it forces me to explain and address
    my own assumptions about my code).&lt;/li&gt;

    &lt;li&gt;I personally don&#x27;t practice strict test-driven development, where one
    writes tests before writing the implementation. I prefer to explore,
    improvise, extemporise and play at first. I often try various different
    approaches to the task in hand and regularly re-draft. I&#x27;ll often seek
    advice and comments from collaborators, colleagues and potential users of
    my code as soon as possible. Therefore, my highest priority when I start a
    new project is making my code simple enough so that it is very easy to
    change. Often this step in the coding process is called a &quot;spike&quot;.&lt;/li&gt;

    &lt;li&gt;Only when a project settles on a certain architecture, implementation
    or foundation of code do I add tests. I think of this as a sort of
    &quot;hardening&quot; process. When I&#x27;m happy with an approach I&#x27;ll often re-draft
    the exploratory code I&#x27;ve already written, alongside writing tests to
    exercise that specific piece of code. I aim for, and often achieve, 100%
    test coverage (every line of my code is exercised in some way by a test).
    This process allows me to get a feel for how my API works from the point of
    view of a fellow coder encountering it for the first time.&lt;/li&gt;

    &lt;li&gt;The hardening has another effect: I&#x27;ve baked in an expectation for how
    the code should behave via the tests. I also make sure my tests are
    commented in such a way that a meaningful intention behind the test is
    revealed. They&#x27;re also a useful source of information for future users
    and/or maintainers of my code. Finally, and perhaps most importantly, they
    help manage change.&lt;/li&gt;

    &lt;li&gt;No useful software is ever finished simply because the universe changes
    (and so must software). Despite our best efforts, software is often
    complicated and it&#x27;s easy to forget something or not realise how a change
    in one part of the
    code may break another apparently unrelated part. Having a suite of
    tests to check all the aspects of a codebase helps future maintainers make
    changes with confidence.&lt;/li&gt;

    &lt;li&gt;Being pragmatic, I sometimes don&#x27;t follow the playful explorations
    outlined above. If I&#x27;m dealing with a well defined or mature protocol
    (for example), I&#x27;ll quickly settle on an approach, usually based upon
    research into how other folks have solved the same problem, and proceed by
    writing tests based upon the protocol in order to measure the completeness,
    accuracy and progress of my resulting implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem for developers writing for CircuitPython is that such code is
usually to be run on microcontrollers with certain hardware capabilities. Yet
such code is invariably written on conventional computers running operating
systems such as Windows, OSX or Linux. The only way to know your code works is
to try it on the target device. This is, to say the least, laborious compared
to having the benefits of running an extensive test suite in a matter of
seconds.&lt;/p&gt;

&lt;p&gt;Having written my small and simple &lt;code&gt;adafruit_radio&lt;/code&gt; module I
found myself missing the benefits of a comprehensive test suite. After asking
around, I found most Python modules for CircuitPython don&#x27;t have a test suite
and there hadn&#x27;t been much (if any) exploration for how to address this. Scott
suggested I add what I thought best in terms of testing to my module.&lt;/p&gt;

&lt;p&gt;I wanted my solution to meet the following requirements:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;It works with existing Python testing tools so non-specialist Python
    developers feel at home and can bring their existing skills to
    CircuitPython with little effort.&lt;/li&gt;

    &lt;li&gt;It runs on a conventional computer, because that&#x27;s where developers do
    the majority of their work. (I&#x27;m constantly running and re-running my
    test-suite as I make changes to code.)&lt;/li&gt;

    &lt;li&gt;It handles the problem of using CircuitPython-only modules in a
    test-suite run on a conventional computer with standard Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to focus on using an existing, well known and mature Python
testing tool called &lt;a href=&quot;http://pytest.org/en/latest/&quot;&gt;PyTest&lt;/a&gt; (the
creation of another friend of mine, the extraordinarily prolific and very
thoughtful &lt;a href=&quot;https://holgerkrekel.net/&quot;&gt;Holger Krekel&lt;/a&gt;). The
advantage of using PyTest is that it has a large number of plug-ins that are
both useful and familiar to a large number of Python programmers. One such
plug-in I use a lot is the
&lt;a href=&quot;https://github.com/pytest-dev/pytest-cov&quot;&gt;Pytest coverage tool&lt;/a&gt;,
which makes it easy to spot areas of a code base that are &lt;em&gt;not&lt;/em&gt; 
exercised by a test suite. PyTest also has a well defined mechanisms to extend
it to work in specialist testing situations (such as our own CircuitPython
based context).&lt;/p&gt;

&lt;p&gt;As far as I was concerned, using PyTest met the first two of my self-imposed
requirements. I was left with the final problem of dealing with CircuitPython
only modules that wouldn&#x27;t work on a conventional computer.&lt;/p&gt;

&lt;p&gt;This is where I need to introduce the concept of &quot;mocking&quot; in a test suite
(as in &quot;mocked up&quot; rather than poking fun). Mocking is a way to replace parts
of your system under test with &quot;mocked up&quot; objects and then make assertions
about how such objects have been used. Thanks to another friend of mine (the
huge hearted, funny and rather hairy
&lt;a href=&quot;http://www.voidspace.org.uk/&quot;&gt;Michael Foord&lt;/a&gt;), mocking is built
right into Python&#x27;s standard library.&lt;/p&gt;

&lt;p&gt;My idea was simple: automatically mock away those parts of CircuitPython
that don&#x27;t work on a conventional computer. Such objects give the developer a
way to check and ensure the module under test is working as expected with
CircuitPython. It&#x27;s even possible to specify how such mock objects should
behave under certain conditions (such as when they may be the source of some
sort of data which the module under test will use). However, this aspect of
mocking should be used with great care -- more on which later.&lt;/p&gt;

&lt;p&gt;If a developer creates a &lt;code&gt;conftest.py&lt;/code&gt; file in their test suite
PyTest will import it before running any of the test code and use various
functions found therein to configure the test suite. For example, if PyTest
finds a function called &lt;code&gt;pytest_runtest_setup&lt;/code&gt; in the
&lt;code&gt;conftest.py&lt;/code&gt; file, then this function will always be called
immediately prior to any test function. Just what we need!&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;https://github.com/ntoll/Adafruit_CircuitPython_Radio/blob/master/tests/conftest.py&quot;&gt;&lt;code&gt;conftest.py file&lt;/code&gt;&lt;/a&gt;
is very short and simply mocks away named aspects of CircuitPython which cannot
be run on a conventional computer immediately before any test is run, via the
aforementioned &lt;code&gt;pytest_runtest_setup&lt;/code&gt; convention.&lt;/p&gt;

&lt;p&gt;It means I can write conventional looking PyTest based unit tests like the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def test_radio_receive_full_no_messages(radio):
    &quot;&quot;&quot;
    If no messages are detected by receive_full then it returns None.
    &quot;&quot;&quot;
    radio.ble.start_scan.return_value = []
    assert radio.receive_full() is None
    radio.ble.start_scan.assert_called_once_with(
        adafruit_radio.AdafruitRadio, minimum_rssi=-255, timeout=1
    )
    radio.ble.stop_scan.assert_called_once_with()
&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

&lt;p&gt;Some things you should know: &lt;code&gt;radio.ble&lt;/code&gt; is a mocked away part of
CircuitPython. As a result, on the first line of my test function, I&#x27;ve been
able to tell the mock that the result of calling the &lt;code&gt;start_scan&lt;/code&gt;
method is an empty list. Then I can assert that the method I want to test (the
&lt;code&gt;radio.receive_full&lt;/code&gt; method returns &lt;code&gt;None&lt;/code&gt; in this
context. Furthermore, I&#x27;m able to check in the final two statements of the
function that the &lt;code&gt;start_scan&lt;/code&gt; method was called with the expected
arguments, and that an additional &lt;code&gt;stop_scan&lt;/code&gt; method was called
too.&lt;/p&gt;

&lt;p&gt;When I run the test suite, I see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pytest --cov-report term-missing --cov=adafruit_radio tests/
============================= test session starts ==============================
platform linux -- Python 3.7.5, pytest-5.3.0, py-1.8.0, pluggy-0.13.0
rootdir: /home/ntoll/src/adafruit_radio
plugins: cov-2.8.1
collected 12 items                                                             

tests/test_adafruit_radio.py ............                                [100%]

----------- coverage: platform linux, python 3.7.5-final-0 -----------
Name                Stmts   Miss  Cover   Missing
-------------------------------------------------
adafruit_radio.py      61      0   100%


============================== 12 passed in 0.09s ==============================
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Note all the feedback about code coverage..! Neat, huh?&lt;/p&gt;

&lt;p&gt;A mock object, by its very nature, is a mock-up of something else... it&#x27;s
not the real thing..! So what happens when the real thing (that has been
mocked-up in the test suite) changes? For instance let&#x27;s imagine that the
result of a call to &lt;code&gt;start_scan&lt;/code&gt; is no longer an empty list, but
something else. The tests will still pass because the mocked-up object doesn&#x27;t
reflect the real object, yet when the module under test is used on a real
device with the changed version of CircuitPython then it won&#x27;t work
correctly.&lt;/p&gt;

&lt;p&gt;This is obviously not a good situation and why I mention mocks should be
used with great care and attention.&lt;/p&gt;

&lt;p&gt;The most obvious solution is for the developer in charge of the test
suite to be careful and check API updates in the release notes of the modules
being mocked away. However, this becomes a burden if the test suite mocks away
a huge number of modules. It&#x27;s also open to human error.&lt;/p&gt;

&lt;p&gt;There are several ways to mitigate this problem, but because it&#x27;s early days
I&#x27;ve not been able to investigate these potential solutions properly. The best
I can do at this point in time is shrug my shoulders, say things are under
construction and invite folks to dive in and help. Our community would
certainly be enriched by such collaborations.&lt;/p&gt;

&lt;p&gt;In conclusion, I&#x27;m quite pleased with this first step in equipping
CircuitPython modules with comprehensive test suites. Yet there&#x27;s still plenty
to do -- most notably, ways to address the problems mentioned with mocking.&lt;/p&gt;

&lt;p&gt;As always, comments, constructive criticism and ideas expressed in a
friendly, collaborative and supportive manner are most welcome.&lt;/p&gt;

&lt;p&gt;Over to you... :-)&lt;/p&gt;

</description>
        <pubDate>Mon, 25 Nov 2019 13:30:00 GMT</pubDate>
    </item>
    
    <item>
        <title>PyWeek Retrospective</title>
        <link>http://ntoll.org/article/pyweek</link>
        <guid>http://ntoll.org/article/pyweek</guid>
        <description>&lt;h1&gt;&lt;a href=&quot;http://ntoll.org/article/pyweek&quot;&gt;PyWeek Retrospective&lt;/a&gt;&lt;/h1&gt;&lt;p class=&quot;published_on&quot;&gt;Tuesday, 23rd April 2019 (4:00PM)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pyweek.org/&quot;&gt;PyWeek&lt;/a&gt; is a simple idea: write a game,
using the Python programming language, from scratch, on a given theme, within a
week. Take part as either an individual or a member of a team entry. At the end
of the week play, feedback and score each others&#x27; entries. After which, an
individual and team are crowned respective champions for their category of
entry.&lt;/p&gt;

&lt;p&gt;I have taken part in three different iterations of PyWeek. Each one has
been extraordinarily good fun.&lt;/p&gt;

&lt;p&gt;My first PyWeek was as an individual entry. The theme was &quot;two worlds&quot;, so
I imagined a paper based battle between the worlds of blue biros and red biros
(it felt like a good idea at the time...). I wanted to push the limits of my
&lt;a href=&quot;https://codewith.mu/&quot;&gt;Mu code editor&lt;/a&gt; for beginner programmers and
&lt;a href=&quot;https://pygame-zero.readthedocs.io/en/stable/&quot;&gt;PyGameZero&lt;/a&gt; (a
gaming framework for beginner programmers integrated into Mu, developed by my
buddy [and organiser of PyWeek] &lt;a href=&quot;&quot;http://mauveweb.co.uk/&gt;Dan Pope&lt;/a&gt;).
The end result was a side-scrolling chase game called
&lt;a href=&quot;https://github.com/ntoll/paperchase&quot;&gt;PaperChase&lt;/a&gt;. This video shows
me testing the game with my (then) thirteen year old son... you&#x27;ll quickly
get the idea:&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/z_wGpJubVwI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;My next entry was as part of a team. I&#x27;d been helping author and
journalist
&lt;a href=&quot;https://andrewsmithauthor.com/&quot;&gt;Andrew Smith&lt;/a&gt; to
&lt;a href=&quot;https://www.1843magazine.com/features/code-to-joy&quot;&gt;take his
first steps into coding&lt;/a&gt;. Making a game seemed like a fun vehicle for
further learning. The theme was &quot;flow&quot; and so we devised a simple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frogger&quot;&gt;Frogger&lt;/a&gt; clone
where you avoided traffic flow whilst being chased by lumbering zombies.
I did the code and Andrew did the sound and music. The end result
(&lt;a href=&quot;https://github.com/ntoll/traffic_flowmageddon&quot;&gt;Trafficflowmageddon&lt;/a&gt;)
is, I feel, quite cute... as zombie relate games go...&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/08mvNmhOVG4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;And so we come to the most recent PyWeek.&lt;/p&gt;

&lt;p&gt;Once again, Andrew and I teamed up. We chatted before hand about the sort
of game we might want to make. Since we both have a love of the written word we
decided to go with a text-based (rather than graphical) game -- the theory
being it would play to our &quot;strengths&quot; with the written word.&lt;/p&gt;

&lt;p&gt;In the end, this was (by far and away) my favourite PyWeek so far. Here&#x27;s
why...&lt;/p&gt;

&lt;p&gt;Graphical games show, text based games describe. Graphical games have an
added cost of &quot;asset&quot; development (the graphical stuff shown on the screen)
whereas text based games only need typed characters. Graphical games tend to
focus on hand/eye skill to progress gameplay, whereas textual games necessarily
put narrative, meaning and intent at the centre of their process.&lt;/p&gt;

&lt;p&gt;Obviously, these are broad generalisations. But what I want to get to is
the idea of a player engaging with a game imaginatively, emotionally and
intellectually via the medium of words. If done properly, the depth of
engagement is potentially greater. I&#x27;m not saying one can&#x27;t be engaged in such
a way with graphical games, rather that textual games are perhaps a medium
which more easily lend themselves to this end. It&#x27;s similar to the difference
between a book and a film.&lt;/p&gt;

&lt;p&gt;I want to be clear, I&#x27;m not saying one is better than the other, these are
very different ways to tell a story or play a game, but I can&#x27;t help but feel a
&quot;reader&quot; has to do more (and the reward is therefore greater) than a
&quot;viewer&quot;.&lt;/p&gt;

&lt;p&gt;I also think that text-based games are, in a sense, more egalitarian and
accessible. Again, to continue the book/film similarity, while no mean feat,
writing a book is within the realms of a single author armed with just a pen
and paper, whereas making a film requires a cast of collaborators and
specialists, equipment, facilities, locations and deep pockets. For similar
reasons, the generation and manipulation of textual game content is far simpler
and affordable than for graphical games.&lt;/p&gt;

&lt;p&gt;So what sort of games are textual?&lt;/p&gt;

&lt;p&gt;Easy! &lt;a href=&quot;https://en.wikipedia.org/wiki/Colossal_Cave_Adventure&quot;&gt;Adventure games&lt;/a&gt;!
If you&#x27;re interested in finding out more about this style of text-based game
you should watch &lt;a href=&quot;https://www.youtube.com/watch?v=o15itQ_EhRo&quot;&gt;GET LAMP&lt;/a&gt;,
a fascinating documentary about the genre. Alternatively, if you want to try
playing an example of such a game, I&#x27;ve embedded one of my favourites below
(just click on it and type some commands). It&#x27;s based on Douglas Adams&#x27;
&quot;Hitchhiker&#x27;s Guide to the Galaxy&quot; (the game itself was co-authored by
Adams).&lt;/p&gt;

&lt;div class=&quot;video-container&quot; style=&quot;border: 1px #ccc solid !important;&quot;&gt;
&lt;iframe src=&quot;http://iplayif.com/?story=http%3A%2F%2Fwww.douglasadams.com%2Fcreations%2Fhhgg.z3&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Here&#x27;s where it gets interesting.&lt;/p&gt;

&lt;p&gt;Such games don&#x27;t have to be single player, solo efforts. While this is a fun
way to play, things get far more interesting if you can play with others. This
is not a new idea and I remember playing such games (commonly called
&lt;a href=&quot;https://en.wikipedia.org/wiki/MUD&quot;&gt;MUD&lt;/a&gt; &quot;Multi-User Dungeons&quot;) via
surreptitious use of my school&#x27;s single 1200 baud modem when the teacher wasn&#x27;t
looking. These were often Tolkien-esque fantasy themed virtual worlds where
players could wander about exploring, socialising and cooperating to achieve
some in-game outcome (usually a quest of some sort). Later, when I was at
university in the mid-1990s, I began using a type of multi-user textual world
called a &lt;a href=&quot;https://en.wikipedia.org/wiki/MOO&quot;&gt;MOO&lt;/a&gt; (Multi-user Object
Oriented). The wonderful thing about MOO based textual worlds is that they are
programmable by users (I first got to grips with object-orientation via
learning to program MOO). In a sense the MOO is both the game and a platform
for creating textual games collaboratively. It was this sense of a creative
textual virtual world that Andrew and I wanted to recreate.&lt;/p&gt;

&lt;p&gt;Et voil√†, &quot;TextSmith&quot; was born.&lt;/p&gt;

&lt;p&gt;The theme for this most recent PyWeek was announced as &quot;six&quot;. This
fitted our idea for an interactive textual platform. It could contain six
different literary worlds which players collaboratively create, inhabit and
explore together. The six literary worlds we &quot;seeded&quot; in our game were:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Jane Austen: Recreate Netherfield, go to a ball, affect regency period
    manners and etiquette.&lt;/li&gt;
    &lt;li&gt;Poetic Passions: Everything is a poem, haiku or rhymes, speak in
    riddles or chat in rhyming couplets.&lt;/li&gt;
    &lt;li&gt;Hardboiled Detectives: It was about eleven o&#x27;clock in the morning, with
    the sun not shining. The client asked, &quot;Well, will you take the case or
    not, bud?&quot;&lt;/li&gt;
    &lt;li&gt;J.R.R.Fantasy: Orcs! Elves! Wizards! Bleak locations! Ancient mystery!
    Quests! (And impenetrable prose.)&lt;/li&gt;
    &lt;li&gt;SciFi and Future Worlds: As the service droids efficiently cleaned up
    the remains of the ship&#x27;s captain, I wondered how long it would take to
    make planet-fall on the alien world of Zaonce.&lt;/li&gt;
    &lt;li&gt;Parry Hotter: Inspired by everyone&#x27;s favourite boy wizard, but in such
    a way that Warner Brothers don&#x27;t go after us for copyright infringement.
    :-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programming the game was a lot of fun. I managed to build everything mostly
from scratch (except for the web based front-end which uses the
&lt;a href=&quot;https://gitlab.com/pgjones/quart&quot;&gt;Quart&lt;/a&gt; web microframework).
Sadly, most of it was unfinished, broken and clunkily implemented. The
important thing is that it has &lt;em&gt;potential&lt;/em&gt;. Below is a screenshot of
an early version of the game:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/textsmith.png&quot; alt=&quot;The TextSmith client.&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Happily, despite the unfinished and rather shonky nature of the end result,
we placed 4th in the team category..! Our highest result..! The
&lt;a href=&quot;https://pyweek.org/e/CodeToJoy/ratings/&quot;&gt;feedback&lt;/a&gt;
from fellow PyWeekers was encouraging too and, as a result, I&#x27;ve decided to
continue to develop TextSmith. In the immediate term this will involve plugging
in the almost-finished scripting language I created and knock off some of the
hard edges. More importantly, once this aspect of the &quot;platform&quot; settles down,
I&#x27;m looking forward to creating and exploring interactive literary worlds.&lt;/p&gt;

&lt;p&gt;Finally, programming, creating and playing with TextSmith has been a very
rich seam of reflection in terms of both technical and playful contexts. I&#x27;ve
had lots of fun thinking about the architecture and implementation of such a
platform while also doing a philosophical deep-dive into what on earth is going
on when &quot;players&quot; connect to, create within and interact with such a
platform.&lt;/p&gt;

&lt;p&gt;Who knows where this may lead..?&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Apr 2019 16:00:00 GMT</pubDate>
    </item>
    
</channel>
</rss>