<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>ntoll.org ~ everything I say is false</title>
    <link>http://ntoll.org/</link>
    <atom:link href="http://ntoll.org/python.xml" rel="self" type="application/rss+xml" />
    <description>Pythonic aricles by Nicholas H.Tollervey</description>
    <image>
        <url>http://ntoll.org/static/images/logo.png</url>
        <link>http://ntoll.org/</link>
        <title>ntoll.org ~ everything I say is false</title>
    </image>
    
    <item>
        <title>CircuitPython 2020</title>
        <link>http://ntoll.org/article/circuitpython-2020</link>
        <guid>http://ntoll.org/article/circuitpython-2020</guid>
        <description>&lt;h1&gt;&lt;a href=&quot;http://ntoll.org/article/circuitpython-2020&quot;&gt;CircuitPython 2020&lt;/a&gt;&lt;/h1&gt;&lt;p class=&quot;published_on&quot;&gt;Tuesday, 7th January 2020 (05:30PM)&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/static/images/blinka-computer.png&quot;/&gt;
&lt;/p&gt;

&lt;p&gt;My buddy &lt;a href=&quot;http://tannewt.org/&quot;&gt;Scott&lt;/a&gt;, one of the wonderful
people at &lt;a href=&quot;https://adafruit.com/&quot;&gt;Adafruit&lt;/a&gt;, recently asked folks
in the wider CircuitPython community to
&lt;a href=&quot;https://blog.adafruit.com/2020/01/01/what-do-you-want-from-circuitpython-in-2020-circuitpython2020-circuitpython/&quot;&gt;share their thoughts&lt;/a&gt;
about what they&#x27;d like to see for the project and community during 2020. This
is my contribution to the conversation.&lt;/p&gt;

&lt;p&gt;There are three aspects to my hopes for CircuitPython in 2020:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Things I hope will continue,&lt;/li&gt;
    &lt;li&gt;Developments I hope to happen,&lt;/li&gt;
    &lt;li&gt;&quot;Moon on a stick&quot; wishes for the future.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I want to start by reaffirming my belief that Adafruit, and those
involved with CircuitPython in particular, do inspiring stuff when it
comes to fostering an open, welcoming, supportive and collaborative tech
community. This is an extraordinary achievement. My own experience in the
wider Python community is that it takes a huge amount of effort, patience,
compassion and thoughtfulness to grow and sustain such a
&quot;&lt;a href=&quot;https://www.wired.com/2008/06/scenius-or-comm/&quot;&gt;scenius&lt;/a&gt;&quot;
(and, sadly, this can be destroyed very quickly by only a few bad actors). So
my wish for continuation in 2020 is that everyone involved in the
CircuitPython community grasp opportunities to enlarge positive aspects of
ourselves such as mutual appreciation, the sharing of tools and techniques,
latent network effects, and a spirit of tolerance, compassion and fun.&lt;/p&gt;

&lt;p&gt;What I hope happens this year is a broadening of CircuitPython&#x27;s horizons.
My passion for tech can be summed up by a quote from David Allen, the producer
on the original BBC micro from the 1980s -- my first computer. He
&lt;a href=&quot;https://www.nesta.org.uk/report/the-legacy-of-bbc-micro/&quot;&gt;explained&lt;/a&gt;
that, &quot;[t]he aim was to democratise computing. We didn&#x27;t want people to be
controlled by it, but to control it.&quot; CircuitPython feels to me like it sits
very much in the hobbyist / enthusiast &quot;segment&quot; of users who already know
something of programming. I&#x27;d love CircuitPython to make inroads into
beginner related education. This probably involves a focus on
learning what teachers would like from a coding platform, honest appraisals of
how beginner coders (no matter their age or background) find their first steps
with CircuitPython and Adafruit boards, as well as making the results of such
findings accessible to all. This final point is important. Learning to code
shouldn&#x27;t just be an option for English speaking, able bodied folk from a
cultural background that means examples and cultural assumptions are
easily understood. I hope you agree that education should be an inclusive
endeavour, and this takes concerted and conscientious effort. I hope the
CircuitPython community find the time and space to invest in the (never
finished) work such a focus entails.&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/static/images/moon_stick.png&quot;/&gt;
&lt;/p&gt;

&lt;p&gt;My &quot;moon on a stick&quot; is a CircuitPython based mobile phone with a touch
screen and a simple
(&lt;a href=&quot;https://pypercard.readthedocs.io/en/latest/&quot;&gt;PyperCard&lt;/a&gt; like?)
Python UI that&#x27;s easily hackable. Think
of it as the open, easy-to-assemble, relatively cheap and &quot;hack friendly&quot;
version of something like the
&lt;a href=&quot;https://www.thelightphone.com/&quot;&gt;Light Phone&lt;/a&gt; with all the
schematics and design assets (e.g. files for 3d printing the case) available
under open source licenses so folks can go mod-crazy. Now wouldn&#x27;t that
be a turn up for the books..?&lt;/p&gt;

&lt;p&gt;I&#x27;ll finish by wishing everyone in the CircuitPython a flourishing and
happy new year. Here&#x27;s to wonderful things in 2020.&lt;/p&gt;

&lt;p&gt;Let&#x27;s go..!&lt;/p&gt;

&lt;p&gt;:-)&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Jan 2020 17:30:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Testing CircuitPython Modules</title>
        <link>http://ntoll.org/article/circuitpython-tests</link>
        <guid>http://ntoll.org/article/circuitpython-tests</guid>
        <description>&lt;h1&gt;&lt;a href=&quot;http://ntoll.org/article/circuitpython-tests&quot;&gt;Testing CircuitPython Modules&lt;/a&gt;&lt;/h1&gt;&lt;p class=&quot;published_on&quot;&gt;Monday, 25th November 2019 (1:30PM)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://micropython.org/&quot;&gt;MicroPython&lt;/a&gt;, a project by my
buddy &lt;a href=&quot;http://dpgeorge.net/&quot;&gt;Damien George&lt;/a&gt;, is a
complete reimplementation of the Python programming language for
microcontrollers and embedded systems. Put simply, it&#x27;s Python for extremely
small computers (and I once
&lt;a href=&quot;http://shop.oreilly.com/product/0636920056515.do&quot;&gt;wrote a book about it&lt;/a&gt;).
&lt;a href=&quot;https://circuitpython.org/&quot;&gt;CircuitPython&lt;/a&gt;, a friendly fork of
MicroPython, is sponsored by the fantastic folks
at &lt;a href=&quot;https://adafruit.com/&quot;&gt;Adafruit&lt;/a&gt;, a company who make playful and
easy-to-use &quot;hackable&quot; technology while promoting a welcoming, friendly and
diverse community of makers. They are led by legendary founder and electrical
engineer extraordinaire, &lt;a href=&quot;http://www.ladyada.net/&quot;&gt;Limor &quot;ladyada&quot; Fried&lt;/a&gt;.
CircuitPython is MicroPython for Adafruit&#x27;s line of boards and with a
consistent API for accessing the numerous bits of cool hardware you can use
with such devices.&lt;/p&gt;

&lt;p&gt;I was privileged to recently complete a block of work for Adafruit: I&#x27;ve
written a CircuitPython module called &lt;code&gt;adafruit_radio&lt;/code&gt; that makes it
easy for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bluetooth&quot;&gt;Bluetooth&lt;/a&gt; enabled
Adafruit boards to communicate with each other. The API is
a simplified version of the work myself and a number of other volunteers did on
the
&lt;a href=&quot;https://microbit-micropython.readthedocs.io/en/v1.0.1/radio.html&quot;&gt;equivalent functionality&lt;/a&gt;
for the BBC micro:bit (&lt;a href=&quot;https://microbit-micropython.readthedocs.io/en/v1.0.1/tutorials/radio.html&quot;&gt;here&#x27;s a tutorial I wrote for the micro:bit
radio&lt;/a&gt;, to make electronic &quot;fireflies&quot; blink at each other over
Bluetooth).&lt;/p&gt;

&lt;p&gt;In the new Adafruit module, sending a message is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio()
r.send(&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Receiving requires a loop (to allow the device to keep checking for
messages), but is equally as simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio()

while True:
    message = r.receive()
    if message:
        # Do something useful with the message.
        print(message)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;The best model for thinking about this module is that of kids&#x27;
walkie-talkies. Each
radio is tuned to a certain channel upon which it broadcasts and receives.
If you send a message, anyone else listening in on that channel and within
range will receive it. You&#x27;ll also receive messages broadcast on that
channel from others within range. 
This is an ideal network topology because it&#x27;s both familiar
yet capable since other, more specialised, network topologies can be built on
top of it. There is potential for users to grow from a simple &quot;walkie-talkie&quot;
model of networking to something more sophisticated and of their own
devising.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/images/walkie-talkie.jpg&quot; alt=&quot;Kids on walkie-talkies&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The channels in the module are numbered between 0-255 and can be set when
creating a &lt;code&gt;Radio&lt;/code&gt; object (the default channel number is 42 in
honour of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Douglas_Adams&quot;&gt;Douglas Adams&lt;/a&gt;, who
saw so much humane potential in new technology yet mischievously warned of the
polluting effect of technology for technology&#x27;s sake via the inept
work of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Technology_in_The_Hitchhiker%27s_Guide_to_the_Galaxy#Sirius_Cybernetics_Corporation&quot;&gt;Sirius Cybernetics Corporation&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio(channel=123)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Alternatively, you can change channel at any time via the &lt;code&gt;Radio&lt;/code&gt;
object&#x27;s &lt;code&gt;configure&lt;/code&gt; method (continuing the example above):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r.configure(channel=7)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Finally, in addition to sending strings of characters it&#x27;s also possible to
send and receive arbitrary bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from adafruit_radio import Radio
r = Radio()
r.send_bytes(b&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Receiving bytes gives you the full context of the message expressed as a
Python tuple consisting of three values: the raw bytes, the RSSI reading (i.e.
strength of the signal, from 0 [max] to -255 [min]), and a timestamp
representing the number (and fraction of) seconds since the device powered up,
as demonstrated in the following REPL based example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from adafruit_radio import Radio
&amp;gt;&amp;gt;&amp;gt; r = Radio()
&amp;gt;&amp;gt;&amp;gt; r.receive_full()
(b&#x27;Hello&#x27;, -40, 3245.155408037)
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;That&#x27;s it! You can find the code in &lt;a href=&quot;https://github.com/ntoll/Adafruit_CircuitPython_Radio&quot;&gt;this GitHub repository&lt;/a&gt;.
Special mention and thanks must be made to Adafruit&#x27;s
&lt;a href=&quot;http://tannewt.org/&quot;&gt;Scott Shawcroft&lt;/a&gt; and
&lt;a href=&quot;https://danhalbert.org/&quot;&gt;Dan Halbert&lt;/a&gt; who
wrote the Bluetooth API I used. Because of their
work I was able to create my module with less than a hundred lines of Python
(at time of writing). Thanks chaps!&lt;/p&gt;

&lt;p&gt;Armed with this context, I&#x27;m going to explain why and how I created a
comprehensive test suite for the &lt;code&gt;adafruit_radio&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;I&#x27;d summarise my approach to testing as follows:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Testing is fundamental for creating and maintaining well designed
    software. My experience is that it tends to produce code that is both
    simple and easy to understand because nobody wants to write complicated
    tests to exercise equally complicated code. The process of exercising code
    through tests forces a developer to think carefully about how their code
    is written while having the added benefit of demonstrating it works as
    expected. Simplicity and ease of understanding are
    desirable properties because such code is easier to read, correct and
    maintain and also indicates the author&#x27;s own clarity of thought (a good
    sign). I also believe it helpful and friendly to write code that&#x27;s easy
    for others to read and understand (I often imagine my code will be read by
    an intelligent beginner coder, because it forces me to explain and address
    my own assumptions about my code).&lt;/li&gt;

    &lt;li&gt;I personally don&#x27;t practice strict test-driven development, where one
    writes tests before writing the implementation. I prefer to explore,
    improvise, extemporise and play at first. I often try various different
    approaches to the task in hand and regularly re-draft. I&#x27;ll often seek
    advice and comments from collaborators, colleagues and potential users of
    my code as soon as possible. Therefore, my highest priority when I start a
    new project is making my code simple enough so that it is very easy to
    change. Often this step in the coding process is called a &quot;spike&quot;.&lt;/li&gt;

    &lt;li&gt;Only when a project settles on a certain architecture, implementation
    or foundation of code do I add tests. I think of this as a sort of
    &quot;hardening&quot; process. When I&#x27;m happy with an approach I&#x27;ll often re-draft
    the exploratory code I&#x27;ve already written, alongside writing tests to
    exercise that specific piece of code. I aim for, and often achieve, 100%
    test coverage (every line of my code is exercised in some way by a test).
    This process allows me to get a feel for how my API works from the point of
    view of a fellow coder encountering it for the first time.&lt;/li&gt;

    &lt;li&gt;The hardening has another effect: I&#x27;ve baked in an expectation for how
    the code should behave via the tests. I also make sure my tests are
    commented in such a way that a meaningful intention behind the test is
    revealed. They&#x27;re also a useful source of information for future users
    and/or maintainers of my code. Finally, and perhaps most importantly, they
    help manage change.&lt;/li&gt;

    &lt;li&gt;No useful software is ever finished simply because the universe changes
    (and so must software). Despite our best efforts, software is often
    complicated and it&#x27;s easy to forget something or not realise how a change
    in one part of the
    code may break another apparently unrelated part. Having a suite of
    tests to check all the aspects of a codebase helps future maintainers make
    changes with confidence.&lt;/li&gt;

    &lt;li&gt;Being pragmatic, I sometimes don&#x27;t follow the playful explorations
    outlined above. If I&#x27;m dealing with a well defined or mature protocol
    (for example), I&#x27;ll quickly settle on an approach, usually based upon
    research into how other folks have solved the same problem, and proceed by
    writing tests based upon the protocol in order to measure the completeness,
    accuracy and progress of my resulting implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem for developers writing for CircuitPython is that such code is
usually to be run on microcontrollers with certain hardware capabilities. Yet
such code is invariably written on conventional computers running operating
systems such as Windows, OSX or Linux. The only way to know your code works is
to try it on the target device. This is, to say the least, laborious compared
to having the benefits of running an extensive test suite in a matter of
seconds.&lt;/p&gt;

&lt;p&gt;Having written my small and simple &lt;code&gt;adafruit_radio&lt;/code&gt; module I
found myself missing the benefits of a comprehensive test suite. After asking
around, I found most Python modules for CircuitPython don&#x27;t have a test suite
and there hadn&#x27;t been much (if any) exploration for how to address this. Scott
suggested I add what I thought best in terms of testing to my module.&lt;/p&gt;

&lt;p&gt;I wanted my solution to meet the following requirements:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;It works with existing Python testing tools so non-specialist Python
    developers feel at home and can bring their existing skills to
    CircuitPython with little effort.&lt;/li&gt;

    &lt;li&gt;It runs on a conventional computer, because that&#x27;s where developers do
    the majority of their work. (I&#x27;m constantly running and re-running my
    test-suite as I make changes to code.)&lt;/li&gt;

    &lt;li&gt;It handles the problem of using CircuitPython-only modules in a
    test-suite run on a conventional computer with standard Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to focus on using an existing, well known and mature Python
testing tool called &lt;a href=&quot;http://pytest.org/en/latest/&quot;&gt;PyTest&lt;/a&gt; (the
creation of another friend of mine, the extraordinarily prolific and very
thoughtful &lt;a href=&quot;https://holgerkrekel.net/&quot;&gt;Holger Krekel&lt;/a&gt;). The
advantage of using PyTest is that it has a large number of plug-ins that are
both useful and familiar to a large number of Python programmers. One such
plug-in I use a lot is the
&lt;a href=&quot;https://github.com/pytest-dev/pytest-cov&quot;&gt;Pytest coverage tool&lt;/a&gt;,
which makes it easy to spot areas of a code base that are &lt;em&gt;not&lt;/em&gt; 
exercised by a test suite. PyTest also has a well defined mechanisms to extend
it to work in specialist testing situations (such as our own CircuitPython
based context).&lt;/p&gt;

&lt;p&gt;As far as I was concerned, using PyTest met the first two of my self-imposed
requirements. I was left with the final problem of dealing with CircuitPython
only modules that wouldn&#x27;t work on a conventional computer.&lt;/p&gt;

&lt;p&gt;This is where I need to introduce the concept of &quot;mocking&quot; in a test suite
(as in &quot;mocked up&quot; rather than poking fun). Mocking is a way to replace parts
of your system under test with &quot;mocked up&quot; objects and then make assertions
about how such objects have been used. Thanks to another friend of mine (the
huge hearted, funny and rather hairy
&lt;a href=&quot;http://www.voidspace.org.uk/&quot;&gt;Michael Foord&lt;/a&gt;), mocking is built
right into Python&#x27;s standard library.&lt;/p&gt;

&lt;p&gt;My idea was simple: automatically mock away those parts of CircuitPython
that don&#x27;t work on a conventional computer. Such objects give the developer a
way to check and ensure the module under test is working as expected with
CircuitPython. It&#x27;s even possible to specify how such mock objects should
behave under certain conditions (such as when they may be the source of some
sort of data which the module under test will use). However, this aspect of
mocking should be used with great care -- more on which later.&lt;/p&gt;

&lt;p&gt;If a developer creates a &lt;code&gt;conftest.py&lt;/code&gt; file in their test suite
PyTest will import it before running any of the test code and use various
functions found therein to configure the test suite. For example, if PyTest
finds a function called &lt;code&gt;pytest_runtest_setup&lt;/code&gt; in the
&lt;code&gt;conftest.py&lt;/code&gt; file, then this function will always be called
immediately prior to any test function. Just what we need!&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;https://github.com/ntoll/Adafruit_CircuitPython_Radio/blob/master/tests/conftest.py&quot;&gt;&lt;code&gt;conftest.py file&lt;/code&gt;&lt;/a&gt;
is very short and simply mocks away named aspects of CircuitPython which cannot
be run on a conventional computer immediately before any test is run, via the
aforementioned &lt;code&gt;pytest_runtest_setup&lt;/code&gt; convention.&lt;/p&gt;

&lt;p&gt;It means I can write conventional looking PyTest based unit tests like the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def test_radio_receive_full_no_messages(radio):
    &quot;&quot;&quot;
    If no messages are detected by receive_full then it returns None.
    &quot;&quot;&quot;
    radio.ble.start_scan.return_value = []
    assert radio.receive_full() is None
    radio.ble.start_scan.assert_called_once_with(
        adafruit_radio.AdafruitRadio, minimum_rssi=-255, timeout=1
    )
    radio.ble.stop_scan.assert_called_once_with()
&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

&lt;p&gt;Some things you should know: &lt;code&gt;radio.ble&lt;/code&gt; is a mocked away part of
CircuitPython. As a result, on the first line of my test function, I&#x27;ve been
able to tell the mock that the result of calling the &lt;code&gt;start_scan&lt;/code&gt;
method is an empty list. Then I can assert that the method I want to test (the
&lt;code&gt;radio.receive_full&lt;/code&gt; method returns &lt;code&gt;None&lt;/code&gt; in this
context. Furthermore, I&#x27;m able to check in the final two statements of the
function that the &lt;code&gt;start_scan&lt;/code&gt; method was called with the expected
arguments, and that an additional &lt;code&gt;stop_scan&lt;/code&gt; method was called
too.&lt;/p&gt;

&lt;p&gt;When I run the test suite, I see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pytest --cov-report term-missing --cov=adafruit_radio tests/
============================= test session starts ==============================
platform linux -- Python 3.7.5, pytest-5.3.0, py-1.8.0, pluggy-0.13.0
rootdir: /home/ntoll/src/adafruit_radio
plugins: cov-2.8.1
collected 12 items                                                             

tests/test_adafruit_radio.py ............                                [100%]

----------- coverage: platform linux, python 3.7.5-final-0 -----------
Name                Stmts   Miss  Cover   Missing
-------------------------------------------------
adafruit_radio.py      61      0   100%


============================== 12 passed in 0.09s ==============================
&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;

&lt;p&gt;Note all the feedback about code coverage..! Neat, huh?&lt;/p&gt;

&lt;p&gt;A mock object, by its very nature, is a mock-up of something else... it&#x27;s
not the real thing..! So what happens when the real thing (that has been
mocked-up in the test suite) changes? For instance let&#x27;s imagine that the
result of a call to &lt;code&gt;start_scan&lt;/code&gt; is no longer an empty list, but
something else. The tests will still pass because the mocked-up object doesn&#x27;t
reflect the real object, yet when the module under test is used on a real
device with the changed version of CircuitPython then it won&#x27;t work
correctly.&lt;/p&gt;

&lt;p&gt;This is obviously not a good situation and why I mention mocks should be
used with great care and attention.&lt;/p&gt;

&lt;p&gt;The most obvious solution is for the developer in charge of the test
suite to be careful and check API updates in the release notes of the modules
being mocked away. However, this becomes a burden if the test suite mocks away
a huge number of modules. It&#x27;s also open to human error.&lt;/p&gt;

&lt;p&gt;There are several ways to mitigate this problem, but because it&#x27;s early days
I&#x27;ve not been able to investigate these potential solutions properly. The best
I can do at this point in time is shrug my shoulders, say things are under
construction and invite folks to dive in and help. Our community would
certainly be enriched by such collaborations.&lt;/p&gt;

&lt;p&gt;In conclusion, I&#x27;m quite pleased with this first step in equipping
CircuitPython modules with comprehensive test suites. Yet there&#x27;s still plenty
to do -- most notably, ways to address the problems mentioned with mocking.&lt;/p&gt;

&lt;p&gt;As always, comments, constructive criticism and ideas expressed in a
friendly, collaborative and supportive manner are most welcome.&lt;/p&gt;

&lt;p&gt;Over to you... :-)&lt;/p&gt;

</description>
        <pubDate>Mon, 25 Nov 2019 13:30:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Advice for a Beginner Coder</title>
        <link>http://ntoll.org/article/advice</link>
        <guid>http://ntoll.org/article/advice</guid>
        <description>&lt;h1&gt;&lt;a href=&quot;http://ntoll.org/article/advice&quot;&gt;Advice for a Beginner Coder&lt;/a&gt;&lt;/h1&gt;&lt;p class=&quot;published_on&quot;&gt;Wednesday 1st November 2017 (12:30pm)&lt;/p&gt;

&lt;p&gt;Last week was &lt;a href=&quot;http://2017.pyconuk.org/&quot;&gt;PyCon UK 2017&lt;/a&gt;. It was
perhaps the best PyCon yet and, as usual, I met many old friends and made
plenty of new ones. Many thanks to Peter Inglesby (chair) and the other
volunteers who put so much work into making this such a wonderful space for
bringing together a community.&lt;/p&gt;

&lt;p&gt;A highlight of the conference for me was the number of young people who were
&lt;strong&gt;not part of the young coders&#x27; day&lt;/strong&gt; but who were attending the
conference as regular attendees (and accompanied by ever-supportive
parents). I got chatting to one such combination of young person and
accompanying parent and they asked for advice on how to develop as
a beginner programmer in the Python community.&lt;/p&gt;

&lt;p&gt;What follows is based upon my response:&lt;/p&gt;

&lt;p&gt;What you get out of the Python community is directly related to how
much you put in. The Python community has a huge number of interesting projects
with which you could engage and learn from.&lt;/p&gt;

&lt;p&gt;Put simply, look for a project that you find interesting and start to
contribute.&lt;/p&gt;

&lt;p&gt;Don&#x27;t dive in and submit thousands of lines of code - rather, do something
small, easy and/or trivial. It&#x27;ll introduce you to the current maintainers of
the project and demonstrate you&#x27;re competent while allowing you to get used to
their modus operandi. Be polite and ask questions that demonstrate you&#x27;ve read
their documentation.&lt;/p&gt;

&lt;p&gt;Don&#x27;t be afraid to ask questions - good developers are
always asking questions. Knowing how to ask and what the right questions are is
an essential skill to develop. &lt;strong&gt;Asking questions is NOT a sign you
don&#x27;t know what you&#x27;re doing&lt;/strong&gt;. To good developers it&#x27;s evidence
that you&#x27;re exploring the problem and a signal that you&#x27;re engaged and
interested.&lt;/p&gt;

&lt;p&gt;To be clear, it takes time to get involved in a project and the quickest
way is often to take small (but secure) steps. Your collaborators, if they&#x27;re
any good, will provide advice about your contributions. This is invaluable
mentorship and it also means you&#x27;ll get to know people in the community. When
you go to conferences, you&#x27;ll have allies and colleagues!&lt;/p&gt;

&lt;p&gt;Be careful to separate criticism of your code from criticism of you. The
very best developers are humble, listen to advice and understand that code can
always be improved. Sometimes it&#x27;s hard to hear that your code is not very
good, but this also helps us to appreciate how to give good (constructive)
advice.&lt;/p&gt;

&lt;p&gt;Nevertheless, if you don&#x27;t get support, if people are rude or there&#x27;s a bad
smell around the project, just leave. Life is too short to have to deal with
idiots, and if you have no choice, find experienced, thoughtful and
conscientious allies to help support you (you&#x27;ll find plenty of them in the
Python community).&lt;/p&gt;

&lt;p&gt;A good project will have a code of conduct that sets expectations of how
collaborators are to interact. &lt;strong&gt;This is far more important than
you may at first realise&lt;/strong&gt; and, happily, many in the Python community
take this aspect of programming very seriously.&lt;/p&gt;

&lt;p&gt;In a similar vein, one of the best activities to help you learn new things
is to teach. Being able to explain things indicates you know the craft of
programming at a deep level. For example, you appreciate what to leave in or
how much to leave out of an explanation. You have clear enough mental models
of the concepts of programming that you can accurately analogize and
summarise. Furthermore, to explain yourself in simple and easy-to-understand
language demonstrates your own clarity of thought. Perhaps most importantly,
finding the opportunities to practice the skill of teaching is a sign of
moral and professional value: you&#x27;re putting something back into the wider
community and you have shown initiative.&lt;/p&gt;

&lt;p&gt;Our community is at its best when people take the time to create a space
where others, no matter their background or differences, can flourish
together. You should endeavour to follow this example. Why? Because inclusion
that celebrates difference and diversity exercises our capacity for empathy
and understanding of others&#x27; lives, problems and interests. As a developer,
how can you be sure what people need from your software? Only by listening to
others, reflecting, evaluating and experimenting is such valuable knowledge
revealed. Only then will you know what important problems to solve.
&lt;strong&gt;This is (also) far more important than you may at first
realise&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, make sure you&#x27;re having fun. Writing code is often a very
frustrating activity, but when you make something work, the elation at seeing
something you&#x27;ve created solve a problem makes all the hours of frustration
worth it.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 12:30:00 GMT</pubDate>
    </item>
    
</channel>
</rss>